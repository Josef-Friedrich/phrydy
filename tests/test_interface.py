"""Test public api / interface"""

import os

import phrydy
from phrydy import MediaFileExtended
from tests import helper


class TestInterface:
    def test_mediafile_class_in_init(self) -> None:
        mediafile = MediaFileExtended(
            os.path.join(helper.TEST_RESOURCES_PATH, "full.mp3")
        )
        assert mediafile.title == "full"

        assert list(mediafile.fields()) == [
            "title",
            "artist",
            "artists",
            "album",
            "genres",
            "genre",
            "lyricist",
            "composer",
            "composer_sort",
            "arranger",
            "grouping",
            "track",
            "tracktotal",
            "disc",
            "disctotal",
            "url",
            "lyrics",
            "comments",
            "copyright",
            "bpm",
            "comp",
            "albumartist",
            "albumartists",
            "albumtypes",
            "albumtype",
            "label",
            "artist_sort",
            "albumartist_sort",
            "asin",
            "catalognums",
            "catalognum",
            "barcode",
            "isrc",
            "disctitle",
            "encoder",
            "script",
            "languages",
            "language",
            "country",
            "albumstatus",
            "media",
            "albumdisambig",
            "date",
            "year",
            "month",
            "day",
            "original_date",
            "original_year",
            "original_month",
            "original_day",
            "artist_credit",
            "artists_credit",
            "artists_sort",
            "albumartist_credit",
            "albumartists_credit",
            "albumartists_sort",
            "art",
            "images",
            "mb_trackid",
            "mb_releasetrackid",
            "mb_workid",
            "mb_albumid",
            "mb_artistids",
            "mb_artistid",
            "mb_albumartistids",
            "mb_albumartistid",
            "mb_releasegroupid",
            "acoustid_fingerprint",
            "acoustid_id",
            "rg_track_gain",
            "rg_album_gain",
            "rg_track_peak",
            "rg_album_peak",
            "r128_track_gain",
            "r128_album_gain",
            "initial_key",
            "mb_workhierarchy_ids",
            "work",
            "work_hierarchy",
            "releasegroup_types",
        ]

        assert list(mediafile.readable_fields()) == [
            "title",
            "artist",
            "artists",
            "album",
            "genres",
            "genre",
            "lyricist",
            "composer",
            "composer_sort",
            "arranger",
            "grouping",
            "track",
            "tracktotal",
            "disc",
            "disctotal",
            "url",
            "lyrics",
            "comments",
            "copyright",
            "bpm",
            "comp",
            "albumartist",
            "albumartists",
            "albumtypes",
            "albumtype",
            "label",
            "artist_sort",
            "albumartist_sort",
            "asin",
            "catalognums",
            "catalognum",
            "barcode",
            "isrc",
            "disctitle",
            "encoder",
            "script",
            "languages",
            "language",
            "country",
            "albumstatus",
            "media",
            "albumdisambig",
            "date",
            "year",
            "month",
            "day",
            "original_date",
            "original_year",
            "original_month",
            "original_day",
            "artist_credit",
            "artists_credit",
            "artists_sort",
            "albumartist_credit",
            "albumartists_credit",
            "albumartists_sort",
            "art",
            "images",
            "mb_trackid",
            "mb_releasetrackid",
            "mb_workid",
            "mb_albumid",
            "mb_artistids",
            "mb_artistid",
            "mb_albumartistids",
            "mb_albumartistid",
            "mb_releasegroupid",
            "acoustid_fingerprint",
            "acoustid_id",
            "rg_track_gain",
            "rg_album_gain",
            "rg_track_peak",
            "rg_album_peak",
            "r128_track_gain",
            "r128_album_gain",
            "initial_key",
            "mb_workhierarchy_ids",
            "work",
            "work_hierarchy",
            "releasegroup_types",
            "length",
            "samplerate",
            "bitdepth",
            "bitrate",
            "bitrate_mode",
            "channels",
            "encoder_info",
            "encoder_settings",
            "format",
        ]

    def test_import_phrydy_media_file(self) -> None:
        assert phrydy.MediaFile.__name__ == "MediaFile"

    def test_import_phrydy_media_file_extended(self) -> None:
        assert phrydy.MediaFileExtended.__name__ == "MediaFileExtended"

    def test_import_phrydy_format_fields_as_txt(self) -> None:
        assert phrydy.format_fields_as_txt.__name__ == "format_fields_as_txt"

    def test_module_import_mediafile(self) -> None:
        mediafile = MediaFileExtended(
            os.path.join(helper.TEST_RESOURCES_PATH, "full.mp3")
        )
        assert mediafile.title == "full"

    def test_module_import_doc(self) -> None:
        fields = phrydy.doc_generator.fields
        assert fields
