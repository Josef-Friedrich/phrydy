"""
This type stub file was generated by pyright.
"""

import sys
import struct
from mutagen._util import reraise, total_ordering
from ._util import ASFError

class ASFBaseAttribute:
    """Generic attribute."""
    TYPE = ...
    _TYPES = ...
    value = ...
    language = ...
    stream = ...
    def __init__(self, value=..., data=..., language=..., stream=..., **kwargs) -> None:
        ...
    
    def data_size(self):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def render(self, name):
        ...
    
    def render_m(self, name):
        ...
    
    def render_ml(self, name):
        ...
    


@ASFBaseAttribute._register
@total_ordering
class ASFUnicodeAttribute(ASFBaseAttribute):
    """Unicode string attribute.

    ::

        ASFUnicodeAttribute(u'some text')
    """
    TYPE = ...
    def parse(self, data):
        ...
    
    def data_size(self): # -> int:
        ...
    
    def __bytes__(self):
        ...
    
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    __hash__ = ...


@ASFBaseAttribute._register
@total_ordering
class ASFByteArrayAttribute(ASFBaseAttribute):
    """Byte array attribute.

    ::

        ASFByteArrayAttribute(b'1234')
    """
    TYPE = ...
    def parse(self, data): # -> bytes:
        ...
    
    def data_size(self): # -> int:
        ...
    
    def __bytes__(self): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    __hash__ = ...


@ASFBaseAttribute._register
@total_ordering
class ASFBoolAttribute(ASFBaseAttribute):
    """Bool attribute.

    ::

        ASFBoolAttribute(True)
    """
    TYPE = ...
    def parse(self, data, dword=...): # -> Any:
        ...
    
    def data_size(self): # -> Literal[4]:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    __hash__ = ...


@ASFBaseAttribute._register
@total_ordering
class ASFDWordAttribute(ASFBaseAttribute):
    """DWORD attribute.

    ::

        ASFDWordAttribute(42)
    """
    TYPE = ...
    def parse(self, data): # -> Any:
        ...
    
    def data_size(self): # -> Literal[4]:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    __hash__ = ...


@ASFBaseAttribute._register
@total_ordering
class ASFQWordAttribute(ASFBaseAttribute):
    """QWORD attribute.

    ::

        ASFQWordAttribute(42)
    """
    TYPE = ...
    def parse(self, data): # -> Any:
        ...
    
    def data_size(self): # -> Literal[8]:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    __hash__ = ...


@ASFBaseAttribute._register
@total_ordering
class ASFWordAttribute(ASFBaseAttribute):
    """WORD attribute.

    ::

        ASFWordAttribute(42)
    """
    TYPE = ...
    def parse(self, data): # -> Any:
        ...
    
    def data_size(self): # -> Literal[2]:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    __hash__ = ...


@ASFBaseAttribute._register
@total_ordering
class ASFGUIDAttribute(ASFBaseAttribute):
    """GUID attribute."""
    TYPE = ...
    def parse(self, data): # -> bytes:
        ...
    
    def data_size(self): # -> int:
        ...
    
    def __bytes__(self): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    __hash__ = ...


def ASFValue(value, kind, **kwargs):
    """Create a tag value of a specific kind.

    ::

        ASFValue(u"My Value", UNICODE)

    :rtype: ASFBaseAttribute
    :raises TypeError: in case a wrong type was passed
    :raises ValueError: in case the value can't be be represented as ASFValue.
    """
    ...

