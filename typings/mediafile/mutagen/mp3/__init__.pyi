"""
This type stub file was generated by pyright.
"""

from __future__ import division
from functools import partial
from io import BytesIO
from mutagen._util import BitReader, cdata, iterbytes

"""
http://www.codeproject.com/Articles/8295/MPEG-Audio-Frame-Header
http://wiki.hydrogenaud.io/index.php?title=MP3
"""
class LAMEError(Exception):
    ...


class LAMEHeader:
    """http://gabriel.mp3-tech.org/mp3infotag.html"""
    vbr_method = ...
    lowpass_filter = ...
    quality = ...
    vbr_quality = ...
    track_peak = ...
    track_gain_origin = ...
    track_gain_adjustment = ...
    album_gain_origin = ...
    album_gain_adjustment = ...
    encoding_flags = ...
    ath_type = ...
    bitrate = ...
    encoder_delay_start = ...
    encoder_padding_end = ...
    source_sample_frequency_enum = ...
    unwise_setting_used = ...
    stereo_mode = ...
    noise_shaping = ...
    mp3_gain = ...
    surround_info = ...
    preset_used = ...
    music_length = ...
    music_crc = ...
    header_crc = ...
    def __init__(self, xing, fileobj) -> None:
        """Raises LAMEError if parsing fails"""
        ...
    
    def guess_settings(self, major, minor):
        """Gives a guess about the encoder settings used. Returns an empty
        string if unknown.

        The guess is mostly correct in case the file was encoded with
        the default options (-V --preset --alt-preset --abr -b etc) and no
        other fancy options.

        Args:
            major (int)
            minor (int)
        Returns:
            text
        """
        ...
    
    @classmethod
    def parse_version(cls, fileobj):
        """Returns a version string and True if a LAMEHeader follows.
        The passed file object will be positioned right before the
        lame header if True.

        Raises LAMEError if there is no lame version info.
        """
        ...
    


class XingHeaderError(Exception):
    ...


class XingHeaderFlags:
    FRAMES = ...
    BYTES = ...
    TOC = ...
    VBR_SCALE = ...


class XingHeader:
    frames = ...
    bytes = ...
    toc = ...
    vbr_scale = ...
    lame_header = ...
    lame_version = ...
    lame_version_desc = ...
    is_info = ...
    def __init__(self, fileobj) -> None:
        """Parses the Xing header or raises XingHeaderError.

        The file position after this returns is undefined.
        """
        ...
    
    def get_encoder_settings(self): # -> Literal['']:
        """Returns the guessed encoder settings"""
        ...
    
    @classmethod
    def get_offset(cls, info): # -> Literal[36, 21, 13]:
        """Calculate the offset to the Xing header from the start of the
        MPEG header including sync based on the MPEG header's content.
        """
        ...
    


class VBRIHeaderError(Exception):
    ...


class VBRIHeader:
    version = ...
    quality = ...
    bytes = ...
    frames = ...
    toc_scale_factor = ...
    toc_frames = ...
    toc = ...
    def __init__(self, fileobj) -> None:
        """Reads the VBRI header or raises VBRIHeaderError.

        The file position is undefined after this returns
        """
        ...
    
    @classmethod
    def get_offset(cls, info): # -> Literal[36]:
        """Offset in bytes from the start of the MPEG header including sync"""
        ...
    


