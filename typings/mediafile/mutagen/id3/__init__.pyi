"""
This type stub file was generated by pyright.
"""

import re
import struct
from itertools import zip_longest
from mutagen._tags import Tags
from mutagen._util import DictProxy, convert_error, read_full
from ._util import BitPaddedInt, ID3EncryptionUnsupportedError, ID3JunkFrameError, ID3NoHeaderError, ID3SaveConfig, ID3UnsupportedVersionError, error, is_valid_frame_id, unsynch
from ._frames import APIC, Frame, Frames, Frames_2_2, IPLS, TDAT, TDOR, TDRC, TIME, TIPL, TORY, TYER, TextFrame

class ID3Header:
    _V24 = ...
    _V23 = ...
    _V22 = ...
    _V11 = ...
    f_unsynch = ...
    f_extended = ...
    f_experimental = ...
    f_footer = ...
    _known_frames = ...
    @property
    def known_frames(self): # -> dict[Unknown, Unknown] | None:
        ...
    
    @convert_error(IOError, error)
    def __init__(self, fileobj=...) -> None:
        """Raises ID3NoHeaderError, ID3UnsupportedVersionError or error"""
        ...
    


def determine_bpi(data, frames, EMPTY=...):
    """Takes id3v2.4 frame data and determines if ints or bitpaddedints
    should be used for parsing. Needed because iTunes used to write
    normal ints for frame sizes.
    """
    ...

class ID3Tags(DictProxy, Tags):
    __module__ = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def getall(self, key): # -> list[Unknown]:
        """Return all frames with a given name (the list may be empty).

        Args:
            key (text): key for frames to get

        This is best explained by examples::

            id3.getall('TIT2') == [id3['TIT2']]
            id3.getall('TTTT') == []
            id3.getall('TXXX') == [TXXX(desc='woo', text='bar'),
                                   TXXX(desc='baz', text='quuuux'), ...]

        Since this is based on the frame's HashKey, which is
        colon-separated, you can use it to do things like
        ``getall('COMM:MusicMatch')`` or ``getall('TXXX:QuodLibet:')``.
        """
        ...
    
    def setall(self, key, values): # -> None:
        """Delete frames of the given type and add frames in 'values'.

        Args:
            key (text): key for frames to delete
            values (list[Frame]): frames to add
        """
        ...
    
    def delall(self, key): # -> None:
        """Delete all tags of a given kind; see getall.

        Args:
            key (text): key for frames to delete
        """
        ...
    
    def pprint(self): # -> str:
        """
        Returns:
            text: tags in a human-readable format.

        "Human-readable" is used loosely here. The format is intended
        to mirror that used for Vorbis or APEv2 output, e.g.

            ``TIT2=My Title``

        However, ID3 frames can have multiple keys:

            ``POPM=user@example.org=3 128/255``
        """
        ...
    
    def loaded_frame(self, tag): # -> None:
        """Deprecated; use the add method."""
        ...
    
    def add(self, frame): # -> None:
        """Add a frame to the tag."""
        ...
    
    def __setitem__(self, key, tag): # -> None:
        ...
    
    def update_to_v24(self): # -> None:
        """Convert older tags into an ID3v2.4 tag.

        This updates old ID3v2 frames to ID3v2.4 ones (e.g. TYER to
        TDRC). If you intend to save tags, you must call this function
        at some point; it is called by default when loading the tag.
        """
        ...
    
    def update_to_v23(self): # -> None:
        """Convert older (and newer) tags into an ID3v2.3 tag.

        This updates incompatible ID3v2 frames to ID3v2.3 ones. If you
        intend to save tags as ID3v2.3, you must call this function
        at some point.

        If you want to to go off spec and include some v2.4 frames
        in v2.3, remove them before calling this and add them back afterwards.
        """
        ...
    


def save_frame(frame, name=..., config=...):
    ...

def read_frames(id3, data, frames):
    """Does not error out"""
    ...

